{"version":3,"sources":["constants.js","utils.js"],"names":["MUTE","UNMUTE","MUTED","UNMUTED","GET_MEET_NUM_PARTICIPATS","MEET_MESSAGE_WHEN_MUTE_IS_ON","MEET_MESSAGE_WHEN_MUTE_IS_OFF","TAKE_ME_BACK_TO_MEET","ongoingMeetRegex","isLiveGoogleMeetTab","tab","url","match","switchToMeetTab","getMeetTab","console","log","chrome","tabs","update","id","selected","active","windows","windowId","drawAttention","focused","setMeetMuteState","muteState","meetTab","sendMessage","changeFavicon","microphoneCurrentState","document","querySelector","href","setMuteState","muted","resolveTabIfHasMoreThanOneParticipants","callback","requestQuery","numParticipants","e","error","isCurrentlyMuted","mutedInfo","Promise","resolve","reject","query","forEach","index","err","updateContextMenuTitle","contextMenuId","newTitle","contextMenus","title","createBasicNotificationWithoutId","iconUrl","message","notifications","create","type"],"mappings":"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","file":"utils.js","sourceRoot":"../../src","sourcesContent":["export const MUTE = \"mute\";\nexport const UNMUTE = \"unmute\";\nexport const MUTED = \"muted\";\nexport const UNMUTED = \"unmuted\";\nexport const GET_MEET_NUM_PARTICIPATS = \"getMeetParticipants\";\nexport const MEET_MESSAGE_WHEN_MUTE_IS_ON = \"Turn on microphone\";\nexport const MEET_MESSAGE_WHEN_MUTE_IS_OFF = \"Turn off microphone\";\nexport const TAKE_ME_BACK_TO_MEET = \"take-me-back-to-meet\";","import { GET_MEET_NUM_PARTICIPATS, MUTE, UNMUTE } from \"./constants\";\n\nconst ongoingMeetRegex = /meet.google.com\\/[a-zA-Z]{3}\\-[a-zA-Z]{4}\\-[a-zA-Z]{3}.*/gm;\n\nconst isLiveGoogleMeetTab = (tab) => {\n    return tab.url.match(ongoingMeetRegex);\n};\n\nconst switchToMeetTab = async () => {\n    try {\n        let tab = await getMeetTab();\n        console.log(\"Got meet tab:\", tab);\n        if (tab != null) {\n            console.log(\"Updating tab to meet:\", tab);\n            chrome.tabs.update(tab.id, { selected: true, active: true });\n            chrome.windows.update(tab.windowId, { drawAttention: true, focused: true });\n        }\n    } catch (err) {\n        console.log(\"Error while getting meet tab\");\n    }\n};\n\nconst setMeetMuteState = async (muteState) => {\n    let meetTab = await getMeetTab();\n    // setMuteState(meetTab, muteState);\n    console.log(\"Sending message to tab:\", meetTab, \"with muteState:\", muteState);\n    chrome.tabs.sendMessage(meetTab.id, { muteState });\n};\n\nconst changeFavicon = (microphoneCurrentState) => {\n    document.querySelector('link[rel*=\"icon\"]').href = \"icon/\" + microphoneCurrentState + \".png\";\n};\n\nconst setMuteState = async (tab, muteState) => {\n    console.log(\"Requested mute state:\", muteState);\n    if (muteState === MUTE) {\n        await chrome.tabs.update(tab.id, { muted: true });\n    }\n    else if (muteState === UNMUTE) {\n        await chrome.tabs.update(tab.id, { muted: false });\n    }\n};\n\nconst resolveTabIfHasMoreThanOneParticipants = (tab, callback) => {\n    try {\n        chrome.tabs.sendMessage(tab.id, { requestQuery: GET_MEET_NUM_PARTICIPATS }, {}, (numParticipants) => {\n            console.log('Number of participants:', numParticipants);\n            callback(numParticipants);\n        });\n    } catch (e) {\n        console.error(\"Error while sendMessage for numParticipants:\", e);\n    }\n}\n\nconst isCurrentlyMuted = (tab) => {\n    return tab.mutedInfo.muted;\n};\n\nconst getMeetTab = () => {\n    return new Promise((resolve, reject) => {\n        try {\n            chrome.tabs.query({}, (tabs) => {\n                tabs.forEach((tab, index) => {\n                    if (isLiveGoogleMeetTab(tab)) {\n                        if (resolveTabIfHasMoreThanOneParticipants(tab, (numParticipants) => {\n                            if (numParticipants > 1) {\n                                console.log(\"Found live Google Meet tab with one participant:\", tab);\n                                return resolve(tab);\n                            }\n                        }));\n                    }\n                });\n            });\n        } catch (err) {\n            reject(err);\n        }\n    })\n};\n\nconst updateContextMenuTitle = (contextMenuId, newTitle) => {\n    chrome.contextMenus.update(contextMenuId, {\n        title: newTitle\n    });\n};\n\n\nconst createBasicNotificationWithoutId = (iconUrl, title, message, callback) => {\n    chrome.notifications.create({\n        type: \"basic\",\n        iconUrl: iconUrl,\n        title: title,\n        message: message,\n    },\n        callback\n    );\n};\n\nexport { isLiveGoogleMeetTab, switchToMeetTab, changeFavicon, setMeetMuteState, updateContextMenuTitle, isCurrentlyMuted, createBasicNotificationWithoutId };"]}